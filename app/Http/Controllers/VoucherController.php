<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;

use App\Repositories\VouchertypeRepository;
use App\Http\Requests\VouchertypesRequest;
use App\Models\Vouchertype;

use App\Http\Requests\ProgramVoucherRequest;
use App\Models\Programvouchertype;

use App\Repositories\UserRepository;
use App\Models\User;

use App\Http\Requests\VoucherNoRequest;
use App\Models\Voucherno;

use App\Models\Batch;
use App\Models\VoucherLimits;

use Carbon\Carbon;

class VoucherController extends Controller
{

      protected $vouchertype_gestion;
      protected $user_gestion;


   public function __construct(
      VouchertypeRepository $vouchertype_gestion,
      UserRepository $user_gestion)
   {
      $this->vouchertype_gestion = $vouchertype_gestion;
      $this->user_gestion = $user_gestion;

      //$this->middleware('admin');
   }

	public function index(){
		
	}

//all types in the system
   public function getOverallTypes(){
      return view('vouchers.overall_types');
   }

//all the batches in the system
   public function getOverallBatches(){
       $batch = new Batch;
      $batches = $batch->get();
      return view('vouchers.overall_batches',compact('batches'));
   }

//fetch voucher types of tht org
   public function getOrgTypes(){

      $voucher_type = new Vouchertype;
      $org_id = auth()->user()->id;
      $voucher_types = $voucher_type->where('user_id','=',$org_id)->get();
      return view('vouchers.org_types',compact('voucher_types'));
   }

//creating major voucher types
   public function create(){
      return view('vouchers.org_create');
   }

//all batches generated by programmes unders a given org
   public function getOrgBatches(){
    $batch = new Batch;

    $batches = $batch
            ->join('users', 'users.id', '=', 'batchs.user_id')
            ->where('users.org_id', '=', auth()->user()->id)
            ->select('batchs.*')
            ->get(); 

      return view('vouchers.org_batches',compact('batches'));
   }

   //vouchers implemented by a logged programme
   public function getProgTypes(){

      //fetch vouchers of my organisation only by org id
      $my_org = auth()->user()->org_id;

      $voucher_type = new Vouchertype;

      $voucher_types = $voucher_type->where('user_id','=',$my_org)->get();
      return view('vouchers.prog_types',array_merge(compact('voucher_types'),$this->getProgramImplementedVoucher()));
   }

//vouchers a program has subscribed to
   public function getProgramImplementedVoucher(){
      $my_org = auth()->user()->org_id; //fetch vouchers of my organisation only by org id
      $my_id = auth()->user()->id;

      $prog_voucher = new Programvouchertype;
      $imp_voucher = $prog_voucher->where('user_id','=',$my_id)->where('org_id','=',$my_org)->get();
      return compact('imp_voucher');
   }

//vouchers a program has not subscribed to
      public function getProgramNonImpmtdVou($id){
      $my_org = auth()->user()->org_id; //fetch vouchers of my organisation only by org id
      $my_id = auth()->user()->id;

      $prog_voucher = new Programvouchertype;
      $imp_voucher = $prog_voucher
                     ->where('user_id','=',$my_id)
                     ->where('org_id','=',$my_org)
                     ->where('vouchertype_id','=',$id)
                     ->first();
      
      if (is_null($imp_voucher)) {
    // It does not exist
         return false;
} else {
    // It exists
   return true;
}
   }

   //batches generated by a program
   public function getProgBatches(){
      $batch = new Batch;
      $batches = $batch->where('user_id','=',auth()->user()->id)->get();
      return view('vouchers.prog_batches',compact('batches'));
   } 

   //generate vouchers form
   public function getGenerateForm(){
      return view('vouchers.prog_generate',$this->getProgramImplementedVoucher());
   }

   //get batch details
   public function getBatchDetails($id){
       $batchdetails = new Voucherno;
      $batchdetail = $batchdetails->where('batch_id','=',$id)->get();
      return view('vouchers.prog_batch_detail',compact('batchdetail'));
   }

   //overall batch detail
   public function getOverallBatchDetails($id){
       $batchdetails = new Voucherno;
      $batchdetail = $batchdetails->where('batch_id','=',$id)->get();
      return view('vouchers.overall_batch_detail',compact('batchdetail'));
   }

   //post voucher types
   public function postOrgTypes(
      VouchertypesRequest $request){

      $vouchertype = new Vouchertype;
      $vouchertype->name = $request->name;
      $vouchertype->color = $request->color;
      $vouchertype->value = $request->value;
      $vouchertype->user_id = auth()->user()->id;
      $vouchertype->save();

      return redirect('voucher_types_of_org')->with('ok', 'Voucher type successfully created.');


   }

   //post a program voucher types
   public function postProgVouchers(
      ProgramVoucherRequest $request){

      $prog_voucher = new Programvouchertype;
      $prog_voucher->vouchertype_id = $request->vouchertype_id;
      $prog_voucher->user_id = $request->user_id;
      $prog_voucher->org_id = $request->org_id;
      $prog_voucher->save();

     return redirect('voucher_types_of_prog')->with('ok', 'Voucher type successfully added to list.');

}

//generating voucher numbers
public function postVouchersNos(VoucherNoRequest $request)
 {

            $batch = new Batch;

        $batch->vouchertype_id = $request->type;
        $batch->quantity = $request->number;
        $batch->user_id = auth()->user()->id;
        $batch->save();

        //last inserted id
        $batchno = $batch->id;

        //get set number of vouchers to generate
      $qtty = new Batch;
      $numberofvouchers = $qtty->where('id','=',$batchno)->first();  

        for ($i = 0; $i<$numberofvouchers->quantity; $i++) 
         {
            $insert[]= [
              'batch_id' => $batchno,
              'voucherno' => $this->genVoucherNo(),
              'serialno' => $this->genSerialNo($batchno),
               'created_at' => Carbon::now(),
               'updated_at' => Carbon::now()
            ];
              //$vouchers->save();
         }
         $vouchers = new Voucherno;
         $vouchers->insert($insert);

        return redirect('voucher_prog_batches')->with('ok','Vouches successfully generated');
    }

      //generate a rondom number btn 100 - 999
    public function generateRandom($min,$max){
      return mt_rand($min,$max);
    }

      //generate a serial number combination
    public function genSerialNo($batchno){      
         $exserialnos = new Voucherno;

         //fetch set seral limits
         $set_serial = new VoucherLimits;
         $set_serials = $set_serial->where('limit','=','serialno')->first();

           do{
               $serialnos = $this->generateRandom($set_serials->min,$set_serials->max);
          }
          while(!empty($exserialnos->where('serialno','=',$serialnos)->first()));
          $serial_dig = 6;
          $num_dig = '%0'.$serial_dig.'d';
         return sprintf($num_dig,$serialnos);      
    }

      //generate a voucher number combination
    public function genVoucherNo(){      
         $exvouchers = new Voucherno;
         
         //fetch set voucherno limits
         $set_vlimit = new VoucherLimits;
         $set_vlimits = $set_vlimit->where('limit','=','voucherno')->first();

       do{
          $second = $this->generateRandom(0,9);
           $vouchernos = $this->generateRandom($set_vlimits->min,$set_vlimits->max).$second;
         }
         while(!empty($exvouchers->where('voucherno','=',$vouchernos)->first()));
          $voucher_dig = 7;
          $num_digv = '%0'.$voucher_dig.'d';
         return sprintf($num_digv,$vouchernos);  
    }

    //generated voucher numbers duplicates
    public function getGeneratedDups($id){
      $vouchers = new Voucherno;

      $duplicates = $vouchers
    ->select('voucherno')
    ->where('batch_id', $id)
    ->groupBy('voucherno')
    ->havingRaw('COUNT(*) > 1')
    ->get();

    $duplicates2 = $vouchers
    ->select('serialno')
    ->where('batch_id', $id)
    ->groupBy('serialno')
    ->havingRaw('COUNT(*) > 1')
    ->get();

        return view('vouchers.duplicates',compact('duplicates','duplicates2'));
    }

    public function duplicateExist($id){
$vouchers = new Voucherno;

      $duplicates = $vouchers
    ->select('voucherno')
    ->where('batch_id', $id)
    ->groupBy('voucherno')
    ->havingRaw('COUNT(*) > 1')
    ->get();

    $duplicates2 = $vouchers
    ->select('serialno')
    ->where('batch_id', $id)
    ->groupBy('serialno')
    ->havingRaw('COUNT(*) > 1')
    ->get();

    if ($duplicates->count()) {
      return true;
    }elseif ($duplicates2->count()) {
      return true;
    }else{
      return false;
    }

    }

    //load edit view for voucher types
    public function edit(Vouchertype $vouchertype){
          return view('vouchers.org_edit',compact('vouchertype'));
    }

    //update voucher type
    public function update(VouchertypesRequest $request,$id){

    }

    //delete programme voucher
    public function postDeleteProgVoucher($id){
      //deleter must be the creator
      $my_id = auth()->user()->id;
      $prog_voucher = new Programvouchertype;
      $prog_voucher->where('user_id','=',$my_id)
                     ->where('id','=',$id)
                     ->delete();

      return redirect()->back()->with('ok','You have successfully unsubscribed');

    }



}
